import streamlit as st 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns 
import plotly.express as px

st.set_page_config(
    page_title="Projet TempÃ©rature",
    page_icon="ðŸ‘‹",
    layout="wide",
)

st.markdown("# Visualisation des donnÃ©es")
st.sidebar.header("Visualisation des donnÃ©es")


pages = ["Ã‰volution des tempÃ©ratures continents et hÃ©misphÃ¨res", "Ã‰volution de la population mondiale et facteurs dominants", "Ã‰volution des anomalies tempÃ©ratures", "Les 10 pays avec le plus d'Ã©missions de gaz"]
page = st.sidebar.radio("Aller vers la page :", pages)

if page == pages[0]:

    df_co2 = pd.read_csv('data/CO2 Donnees.csv', sep = ',')

    st.write("### Ã‰volution des tempÃ©ratures continents et hÃ©misphÃ¨res")
    
    # Liste des continents
    regions_of_interest = ['Africa', 'Asia', 'Europe', 'North America', 'South America', 'Oceania']

    # SÃ©lection des continents Ã  afficher
    selected_regions = st.multiselect('SÃ©lectionnez les continents :', regions_of_interest, default=regions_of_interest)

    # Filtrer les donnÃ©es en fonction des continents sÃ©lectionnÃ©s
    df_selected_regions = df_co2[(df_co2['country'].isin(selected_regions)) & (df_co2['year'] >= 1850) & (df_co2['year'] <= 2021)].copy()

    # Supprimer les lignes contenant des valeurs NaN dans les colonnes spÃ©cifiÃ©es
    columns_to_clean = ['temperature_change_from_ch4', 'temperature_change_from_co2', 'temperature_change_from_ghg', 'temperature_change_from_n2o']
    df_selected_regions = df_selected_regions.dropna(subset=columns_to_clean)

    # Ajouter la constante de 14.185 aux colonnes spÃ©cifiÃ©es
    df_selected_regions['total_temperature_change'] = df_selected_regions[columns_to_clean].sum(axis=1) + 14.185

    # CrÃ©er un graphique Matplotlib
    fig, ax = plt.subplots(figsize=(25, 12))  # Ajuster la taille du graphique
    for region in selected_regions:
        df_plot = df_selected_regions[df_selected_regions['country'] == region]
        ax.plot(df_plot['year'], df_plot['total_temperature_change'], label=region)

    ax.set_title('Ã‰volution du changement de tempÃ©rature pour diffÃ©rents continents (1850-2021)', fontsize=30)  # Ajuster la taille de la police
    ax.set_xlabel('AnnÃ©e', fontsize=30)  # Ajuster la taille de la police
    ax.set_ylabel('Changement de tempÃ©rature total', fontsize=30)  # Ajuster la taille de la police
    ax.legend(fontsize=20)  # Ajuster la taille de la police
    ax.grid(True)
    
    
    # Afficher le graphique dans Streamlit
    st.pyplot(fig)
    
    st.write("### Ce graphique indique l'Ã©volution des tempÃ©ratures par continents.")
    st.write("### Nous remarquons rapidement que l'Europe et l'AmÃ©rique du nord ont un dÃ©marrage prÃ©coce, car dÃ¨s le dÃ©but du XXÃ¨me siÃ¨cle l'augmentation des tempÃ©ratures est enclenchÃ©e.")
    st.write("### Il est vrai que l'Europe est le berceau de la RÃ©volution Industrielle parfois spontanÃ©e comme en Grande-Bretagne, parfois en rÃ©action gÃ©opolitique comme en France ou imposÃ©e lÃ©galement en Allemagne ou en Russie (puis en Union SoviÃ©tique) avec le Plan Quinquennal.")
    st.write("### Il est intÃ©ressant de noter qu'Ã  partir des annÃ©es 1980-1990, la courbe s'inflÃ©chit sans toutefois retomber. La dÃ©localisation des industries polluantes vers la Chine essentiellement en est responsable. Il apparait donc qu'il existe d'autres sources de pollution provoquant une augmentation des tempÃ©ratures.")
    st.write("### Pour l'AmÃ©rique du nord le rÃ©el dÃ©collage a lieu aprÃ¨s la Guerre de SÃ©cession en 1865, dÃ©crite comme Ã©tant la premiÃ¨re guerre industrielle. L'industrialisation des anciens Ã©tats sudistes essentiellement agricoles sera un ajout consÃ©quent Ã  la puissance indutrielle des USA. ")
    st.write("### Pour l'Asie, le Japon comprend rapidement les avantages de l'industrialisation avec les Meijis en 1868, toutefois au niveau du continent la mise en place d'une politique de rÃ©industralisatoin de la Chine avec Mao Zedong sera nettement visible Ã  partir de 1950.")
    st.write("### Pour les continents Sud-amÃ©ricain et Africain l'Ã©mergence en tant que puissances industrielles est beaucoup plus tardive. Toutefois elle a bien dÃ©marrÃ© au passage du XXIÃ©me siÃ¨cle.")
    st.write("### L'Australasie est un cas intÃ©ressant car ce continent est industrialisÃ© et mÃªme avancÃ© dans le cas de l'Australie et de la Nouvelle-ZÃ©lande et malgrÃ© cela sa contribution Ã  l'Ã©volution des tempÃ©ratures reste minime.")    
    st.write("\n")
    st.write("\n")
    
    tabHemi, tabHemiMoyMob= st.tabs(["## Evolutions des tempÃ©ratures dans hÃ©misphÃ¨re nord et sud", "## Evolutions des tempÃ©ratures dans hÃ©misphÃ¨re nord et sud avec moyenne mobile Ã  5 ans"])
    
    df_zone = pd.read_csv('data/Temperature Moyenne Index Global 100.csv', sep=',')
    # Filtrer les donnÃ©es pour obtenir seulement celles de 1880 Ã  2022
    df_zone_filtered = df_zone[(df_zone['Year'] >= 1880) & (df_zone['Year'] <= 2022)]

    # Diviser les valeurs par 100 et ajouter 14.185
    df_zone_filtered['NHem'] = df_zone_filtered['NHem'] / 100 + 14.185
    df_zone_filtered['SHem'] = df_zone_filtered['SHem'] / 100 + 14.185

    with tabHemi: 
        # Tracer les courbes
        fig = plt.figure(figsize=(25, 12))
        plt.plot(df_zone_filtered['Year'], df_zone_filtered['NHem'], label='NHem')
        plt.plot(df_zone_filtered['Year'], df_zone_filtered['SHem'], label='SHem')
        plt.title('Ã‰volution des tempÃ©ratures dans l\'hÃ©misphÃ¨re nord et sud (1880-2022)', fontsize=30)
        plt.axhline(y=14.185, color='red', linestyle='--', linewidth=1)
        plt.xlabel('AnnÃ©e', fontsize=30)
        plt.ylabel('Anomalie de tempÃ©rature', fontsize=30)
        plt.legend(fontsize=20)
        plt.grid(True)
        st.pyplot(fig)
    with tabHemiMoyMob: 
        # Tracer les courbes
        fig = plt.figure(figsize=(25, 12))
        # Ajoutez une colonne pour la moyenne mobile sur 5 ans
        df_zone_filtered['NHem_moyenne_mobile_5ans'] = df_zone_filtered['NHem'].rolling(window=5).mean()
        df_zone_filtered['SHem_moyenne_mobile_5ans'] = df_zone_filtered['SHem'].rolling(window=5).mean()
        plt.plot(df_zone_filtered['Year'], df_zone_filtered['NHem_moyenne_mobile_5ans'], label='NHem - Moyenne mobile 5 ans')
        plt.plot(df_zone_filtered['Year'], df_zone_filtered['SHem_moyenne_mobile_5ans'], label='SHem - Moyenne mobile 5 ans')
        plt.title('Ã‰volution des tempÃ©ratures avec moyennes mobiles Ã  5 ans (1880-2022)', fontsize=30)
        plt.axhline(y=14.185, color='red', linestyle='--', linewidth=1)
        plt.xlabel('AnnÃ©e', fontsize=30)
        plt.ylabel('Anomalie de tempÃ©rature', fontsize=30)
        plt.legend(fontsize=20)
        plt.grid(True)
        st.pyplot(fig)
        
    st.image("images/carte-du-monde-continents.jpg")  
    st.write("carte-du-monde.net")
    st.write("## L'hÃ©misphÃ¨re Nord :")
    st.write("### Environ 100 millions de kilomÃ¨tres carrÃ©s de terres Ã©mergÃ©es sont situÃ©s dans cet hÃ©misphÃ¨re, soit les deux tiers du total mondial.")
    st.write("### Comme l'hÃ©misphÃ¨re nord a une surface de 255 millions de kilomÃ¨tres carrÃ©s, il est couvert de terres Ã©mergÃ©es Ã  hauteur de 40 %.")
    st.write("### Il est Ã  remarquer que la plus grande partie de l'humanitÃ© (prÃ¨s de 90 % de la population totale) vit dans cet hÃ©misphÃ¨re,")
    st.write("### ce qui n'est guÃ¨re surprenant Ã©tant donnÃ© que l'Asie, qui compte Ã  elle seule environ 60 % de la population mondiale, est presque entiÃ¨rement situÃ©e dans l'hÃ©misphÃ¨re nord. ")
    
    st.write("## L'hÃ©misphÃ¨re Sud :")
    st.write("### L'hÃ©misphÃ¨re sud terrestre est essentiellement marin. Les terres Ã©mergÃ©es (50 millions de kilomÃ¨tres carrÃ©s) ne reprÃ©sentent que 20 % de sa surface et le tiers des terres Ã©mergÃ©es terrestres.")
    st.write("### Entre 50 et 65 degrÃ©s de latitude sud, il n'y a quasiment pas de terre Ã©mergÃ©e, ce qui n'est pas le cas de l'hÃ©misphÃ¨re nord.")
    st.write("### L'Antarctique est le seul continent sans population indigÃ¨ne. ")
    
    st.write("## La population est peut-Ãªtre aussi un facteur contribuant Ã  l'Ã©volution des tempÃ©ratures ?")

elif page == pages[1]:
    st.write("### Ã‰volution de la population mondiale et facteurs dominants")
    df_co2 = pd.read_csv('data/CO2 Donnees.csv', sep = ',')
    
    # Liste des courbes
    graphics_of_interest = ["PIB", "TempÃ©rature", "TempÃ©rature avec moyenne mobile Ã  5 ans", "Ã‰missions de CO2"]

    selected_graphic = st.selectbox("SÃ©lectionnez le type du graphique", graphics_of_interest)
    
    fig, ax1 = plt.subplots(figsize=(25, 12))  # Ajuster la taille du graphique
    # Filtrer les donnÃ©es pour obtenir seulement celles oÃ¹ le pays est "World" et la pÃ©riode est de 1850 Ã  2021
    world_population_data = df_co2[(df_co2['country'] == 'World') & (df_co2['year'] >= 1850) & (df_co2['year'] <= 2021)]
    ax1.plot(world_population_data['year'], world_population_data['population'], label='Population mondiale', color='blue')
    ax2 = ax1.twinx()   

    if selected_graphic == "PIB":
        # Filtrer les donnÃ©es pour obtenir seulement celles oÃ¹ la colonne "iso_code" est renseignÃ©e et la pÃ©riode est de 1850 Ã  2018
        df_filtered = df_co2[(df_co2['iso_code'].notna()) & (df_co2['year'] >= 1850) & (df_co2['year'] <= 2018)]

        # Groupby par annÃ©e et sum pour obtenir la somme du PIB (gdp) pour chaque annÃ©e
        df_sum_gdp = df_filtered.groupby('year')['gdp'].sum().reset_index()

        ax2.plot(df_sum_gdp['year'], df_sum_gdp['gdp'], label='Somme du PIB mondial', color='black')
        ax2.set_title('Ã‰volution Population Mondiale et PIB (1850-2021)', fontsize=30)  # Ajuster la taille de la police
        ax2.set_ylabel('PIB mondial', color='black', fontsize=30)
        ax2.tick_params(axis='y', labelcolor='black')
    elif selected_graphic == "TempÃ©rature":
        df_anoIncTemp = pd.read_csv('data/Anomalies Incertitude Temperature.csv', sep=';')
        # Ajoutez la constante de 14.185 Ã  la colonne "anomalie"
        df_anoIncTemp['anomalie'] = df_anoIncTemp['anomalie'] + 14.185

        ax2.plot(df_anoIncTemp['year'], df_anoIncTemp['anomalie'], label='Ã‰volution des tempÃ©ratures', color='red')
        ax2.set_title('Ã‰volution de la population mondiale et des tempÃ©ratures (1850-2021)', fontsize=30)  # Ajuster la taille de la police
        ax2.set_ylabel('Anomalie de tempÃ©rature', color='red', fontsize=30)
        ax2.tick_params(axis='y', labelcolor='red')
    elif selected_graphic == "TempÃ©rature avec moyenne mobile Ã  5 ans":
        df_anoIncTemp = pd.read_csv('data/Anomalies Incertitude Temperature.csv', sep=';')
        # Ajoutez la constante de 14.185 Ã  la colonne "anomalie"
        df_anoIncTemp['anomalie'] = df_anoIncTemp['anomalie'] + 14.185
        
        ax2.plot(df_anoIncTemp['year'], df_anoIncTemp['anomalie'].rolling(window=5).mean(), label='Moyenne mobile (5 ans)', color='green')
        ax2.set_title('Ã‰volution population mondiale et tempÃ©ratures (1850-2021)\n moyenne mobile (5 ans)', fontsize=30)  # Ajuster la taille de la police
        ax2.set_ylabel("Anomalie de tempÃ©rature", color="green" , fontsize=30)
        ax2.tick_params(axis='y', labelcolor='green')
    elif selected_graphic == "Ã‰missions de CO2":
        # Filtrer les donnÃ©es pour obtenir seulement celles oÃ¹ la colonne "iso_code" est renseignÃ©e et la pÃ©riode est de 1850 Ã  2018
        df_filtered = df_co2[(df_co2['iso_code'].notna()) & (df_co2['year'] >= 1850) & (df_co2['year'] <= 2018)]

        # Groupby par annÃ©e et sum pour obtenir la somme de co2_including_luc et de la population pour chaque annÃ©e
        df_sum_co2_population = df_filtered.groupby('year')[['co2_including_luc', 'population']].sum().reset_index()

        ax2.plot(df_sum_co2_population['year'], df_sum_co2_population['co2_including_luc'], label='Somme de CO2 (y compris LUC)', color='orange')
        ax2.set_title('Ã‰volution Population Mondiale et Ã©missions de gaz (1850-2021)', fontsize=30)  # Ajuster la taille de la police
        ax2.set_ylabel('Ã‰missions de CO2 (y compris LUC)', color='orange', fontsize=30)
        ax2.tick_params(axis='y', labelcolor='orange')

    ax1.set_xlabel('AnnÃ©e', fontsize=30)  # Ajuster la taille de la police
    ax1.set_ylabel('Population mondiale', color='blue', fontsize=32)  # Ajuster la taille de la police
    ax1.grid(True)
    ax1.legend(loc='upper left', fontsize=28) # Ajuster la taille de la police
    ax2.legend(loc='upper right', fontsize=28)
    
    # Afficher le graphique dans Streamlit
    st.pyplot(fig)
     
    
    st.write("### Du milieu du XIXÃ¨me siÃ¨cle au dÃ©but du XXIÃ¨me siÃ¨cle, le monde a connu une croissance Ã©conomique sans prÃ©cÃ©dent.")
    st.write("### Cette croissance nâ€™a Ã©tÃ© ni continue dans le temps (crises dÃ©pressions rÃ©cessions fortes pÃ©riodes de croissance se succÃ¨dentâ€¦), ni continue dans lâ€™espaceâ€¦")
    st.write("### Mais, malgrÃ© tout, elle a bouleversÃ© les Ã©conomies et les sociÃ©tÃ©s traditionnelles qui existaient jusque-lÃ .")
    st.write("### Ainsi, Ã  partir du milieu du XIXÃ¨me, lâ€™industrialisation et la croissance Ã©conomique sâ€™accompagnent : de lâ€™Ã©mergence dâ€™Ã©conomies-monde, de la mondialisation et d'un reclassement des puissances mondiales.")
    st.write("### De 1850 Ã  1914, le Royaume-Uni domine lâ€™Ã©conomie mondiale.")
    st.write("### Puis, câ€™est au tour des Etats-Unis au cours du XXÃ¨me siÃ¨cle.")
    st.write("### Enfin, aujourdâ€™hui, lâ€™hÃ©gÃ©monie amÃ©ricaine est remise en cause et lâ€™Ã©conomie mondiale devient multipolaireâ€¦")   
    st.write("")
    st.write("")
    st.write("")
    st.image ("images/figure-18-02.jpg")
    st.write("")
    st.write("### Ce graphique reprÃ©sente les exportations de marchandises (ce qui exclut les services) Ã  lâ€™Ã©chelle mondiale, exprimÃ©es comme une part du PIB mondial,")
    st.write("### entre 1820 et 2011. La part a augmentÃ© dâ€™un facteur 8 entre 1820 et 1913, de 1 % Ã  8 %. En 1950, cette part Ã©tait plus faible (5,5 %), mais elle a crÃ» rapidement")
    st.write("### pendant la pÃ©riode de prospÃ©ritÃ© de lâ€™aprÃ¨s-guerre. Elle a atteint 10,5 % en 1973, 17 % en 1998 et 26 % en 2011. Ã€ long terme, on distingue clairement que la tendance est Ã  la hausse,")
    st.write("### avec une accÃ©lÃ©ration importante depuis les annÃ©es 1990. Cependant, cette tendance fut interrompue entre 1914 et 1945, pÃ©riode au cours de laquelle se dÃ©roulÃ¨rent les deux guerres mondiales et la Grande DÃ©pression.")
    
    
elif page == pages[2]:
    st.write("### Ã‰volution des anomalies tempÃ©ratures")
    tabMoyMob, tabIncertitudes= st.tabs(["Moyennes mobiles", "Incertitude"])
    
    df_anoIncTemp = pd.read_csv('data/Anomalies Incertitude Temperature.csv', sep=';')
    # Ajouter la constante de 14.185 Ã  la colonne "anomalie"
    df_anoIncTemp['anomalie'] = df_anoIncTemp['anomalie'] + 14.185

    with tabMoyMob:
        # Ajouter une colonne pour la moyenne mobile sur 5 ans
        df_anoIncTemp['moyenne_mobile_5ans'] = df_anoIncTemp['anomalie'].rolling(window=5).mean()

        # Ajouter une colonne pour la moyenne mobile sur 10 ans
        df_anoIncTemp['moyenne_mobile_10ans'] = df_anoIncTemp['anomalie'].rolling(window=10).mean()
        # Tracer les courbes
        fig = plt.figure(figsize=(20, 10))
        plt.plot(df_anoIncTemp['year'], df_anoIncTemp['anomalie'], label='Anomalie')
        if st.checkbox("Afficher la moyenne mobile Ã  5 ans", True) : 
            plt.plot(df_anoIncTemp['year'], df_anoIncTemp['moyenne_mobile_5ans'], label='Moyenne mobile 5 ans')

        if st.checkbox("Afficher la moyenne mobile Ã  10 ans", True): 
            plt.plot(df_anoIncTemp['year'], df_anoIncTemp['moyenne_mobile_10ans'], label='Moyenne mobile 10 ans')

        plt.axhline(y=14.185, color='red', linestyle='--', linewidth=1)
        plt.title('Ã‰volution des tempÃ©ratures et moyennes mobiles (1850-2021)',fontsize=30)
        plt.xlabel('AnnÃ©e',fontsize=30)
        plt.ylabel('Anomalie de tempÃ©rature',fontsize=30)
        plt.legend()
        plt.grid(True)
        st.pyplot(fig)
        
        st.write("")
        st.write("")
        st.image ("images/celsius.jpg")
        st.write("### Celsius - Poste suÃ©doise.")
        st.write("### Astronome et physicien suÃ©dois, Anders Celsius (1701-1744) met au point en 1742 un thermomÃ¨tre Ã  mercure utilisant une Ã©chelle graduÃ©e de 0 Ã  100 :")
        st.write("### le 0 Â°C correspondait au point dâ€™Ã©bullition de lâ€™eau, et le 100 Â°C, au point de congÃ©lation de lâ€™eau. Ces valeurs seront inversÃ©es un peu plus tard.")
        st.write("### Cette Ã©chelle sera adoptÃ©e partout dÃ¨s la fin du XVIIIe siÃ¨cle, sauf dans les pays anglo-saxons, qui utilisent aujourdâ€™hui encore lâ€™Ã©chelle Fahrenheit.")
        st.write("### Longtemps dite Â« centÃ©simale Â» ou Â« centigrade Â», elle ne prendra le nom de son inventeur quâ€™en 1948.")
        
    with tabIncertitudes:
        # Ajouter la constante de 14.185 Ã  la colonne "anomalie"
        df_anoIncTemp['anomalie_plus_incertitude'] = df_anoIncTemp['anomalie'] + df_anoIncTemp['incertitude']
        df_anoIncTemp['anomalie_moins_incertitude'] = df_anoIncTemp['anomalie'] - df_anoIncTemp['incertitude']

        # Tracer les courbes
        fig = plt.figure(figsize=(20, 10))
        plt.plot(df_anoIncTemp['year'], df_anoIncTemp['anomalie'], label='Anomalie')
        if st.checkbox("Afficher anomalie + Incertitude", True) : 
            plt.plot(df_anoIncTemp['year'], df_anoIncTemp['anomalie_plus_incertitude'], label='Anomalie + Incertitude', color="darkred")
            plt.fill_between(df_anoIncTemp['year'], df_anoIncTemp['anomalie'], df_anoIncTemp['anomalie_plus_incertitude'], color='pink')

        if st.checkbox("Afficher anomalie - Incertitude", True): 
            plt.plot(df_anoIncTemp['year'], df_anoIncTemp['anomalie_moins_incertitude'], label='Anomalie - Incertitude', color="darkred")
            plt.fill_between(df_anoIncTemp['year'], df_anoIncTemp['anomalie'], df_anoIncTemp['anomalie_moins_incertitude'], color='pink')

        plt.axhline(y=14.185, color='red', linestyle='--', linewidth=1)
        plt.title('Ã‰volution tempÃ©ratures avec incertitude (1850-2021)',fontsize=30)
        plt.xlabel('AnnÃ©e',fontsize=30)
        plt.ylabel('Anomalie de tempÃ©rature',fontsize=30)
        plt.legend()
        plt.grid(True)
        st.pyplot(fig)
        
        st.write("")
        st.write("")
        st.image ("images/celsius2.jpg")
        st.write("### On comprend mieux l'importance des incertitudes au dÃ©but.")

else:
    st.write("### Les 10 pays les plus Ã©metteurs")
    tabTemp, tabGreenhouseGas= st.tabs(["Ã‰volution de la tempÃ©rature", "Ã‰volution des gaz Ã  effet de serre"])
    df_co2 = pd.read_csv('data/CO2 Donnees.csv', sep=',')
    
    with tabGreenhouseGas: 

        # Filtrer les donnÃ©es pour exclure les lignes oÃ¹ la colonne "iso_code" est vide
        df_filtered = df_co2[df_co2['iso_code'].notnull()]

        # SÃ©lectionner les 10 pays ayant le plus grand total dans les colonnes spÃ©cifiÃ©es
        top_10_countries = df_filtered.groupby('country').sum()[['co2_including_luc', 'methane', 'nitrous_oxide', 'total_ghg']].sum(axis=1).nlargest(10).index

        # CrÃ©er un dataframe combinÃ© avec les donnÃ©es de chaque pays
        df_combined = pd.DataFrame()

        for country in top_10_countries:
            df_country = df_filtered[df_filtered['country'] == country].copy()
            
            # Supprimer les lignes contenant des valeurs NaN dans les colonnes spÃ©cifiÃ©es
            columns_to_clean = ['co2_including_luc', 'methane', 'nitrous_oxide', 'total_ghg']
            df_country = df_country.dropna(subset=columns_to_clean)
            
            # Ajouter une colonne pour le pays
            df_country['country'] = country
            
            # ConcatÃ©ner avec le dataframe combinÃ©
            df_combined = pd.concat([df_combined, df_country])

        # Tracer le graphique
        fig = plt.figure(figsize=(20, 10))
        for country in top_10_countries:
            df_plot = df_combined[df_combined['country'] == country]
            plt.plot(df_plot['year'], df_plot['co2_including_luc'] + df_plot['methane'] + df_plot['nitrous_oxide'] + df_plot['total_ghg'], label=country)

        plt.title('Ã‰volution gaz Ã  effet de serre',fontsize=30)
        plt.xlabel('AnnÃ©e',fontsize=30)
        plt.ylabel('Total des Ã©missions',fontsize=30)
        plt.legend()
        plt.grid(True)
        st.pyplot(fig)
        
        st.write("")
        st.write("")
        st.image ("images/GES-quotidien.jpg")

    with tabTemp:
        # Filtrer les donnÃ©es pour exclure les lignes oÃ¹ la colonne "iso_code" est vide
        df_filtered = df_co2[df_co2['iso_code'].notnull()]

        # SÃ©lectionner les 10 pays ayant le plus grand total dans les colonnes spÃ©cifiÃ©es
        top_10_countries = df_filtered.groupby('country').sum()[['co2_including_luc', 'methane', 'nitrous_oxide', 'total_ghg']].sum(axis=1).nlargest(10).index

        # CrÃ©er un dataframe combinÃ© avec les donnÃ©es de chaque pays
        df_combined = pd.DataFrame()

        for country in top_10_countries:
            df_country = df_filtered[df_filtered['country'] == country].copy()
            
            # Supprimer les lignes contenant des valeurs NaN dans les colonnes spÃ©cifiÃ©es
            columns_to_clean = ['temperature_change_from_ch4', 'temperature_change_from_co2', 'temperature_change_from_ghg', 'temperature_change_from_n2o']
            df_country = df_country.dropna(subset=columns_to_clean)
            
            # Ajouter une colonne pour le pays
            df_country['country'] = country
            
            # ConcatÃ©ner avec le dataframe combinÃ©
            df_combined = pd.concat([df_combined, df_country])

        # Tracer le graphique
        fig = plt.figure(figsize=(20, 10))
        for country in top_10_countries:
            df_plot = df_combined[df_combined['country'] == country]
            total_temperature_change = df_plot[columns_to_clean].sum(axis=1)
            plt.plot(df_plot['year'], total_temperature_change, label=country)

        plt.title('Ã‰volution des tempÃ©rature',fontsize=30)
        plt.xlabel('AnnÃ©e',fontsize=30)
        plt.ylabel('Changement tempÃ©rature',fontsize=30)
        plt.legend()
        plt.grid(True)
        st.pyplot(fig)
        
        st.write("")
        st.write("")
        st.image ("images/GES-quotidien.jpg")